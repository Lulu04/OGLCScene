unit frame_tool_levelbank;

{$mode ObjFPC}{$H+}

interface

uses
  Classes, SysUtils, Forms, Controls, ExtCtrls, Buttons, StdCtrls, Dialogs,
  u_levelbank;

type

  { TFrameToolLevelBank }

  TFrameToolLevelBank = class(TFrame)
    BDelete: TSpeedButton;
    BDuplicate: TSpeedButton;
    BEdit: TSpeedButton;
    BExportToPascalUnit: TSpeedButton;
    BRedo: TSpeedButton;
    BRename: TSpeedButton;
    BUndo: TSpeedButton;
    Edit1: TEdit;
    Edit2: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Label24: TLabel;
    Label25: TLabel;
    LB: TListBox;
    Panel1: TPanel;
    Panel2: TPanel;
    Panel8: TPanel;
    SD1: TSaveDialog;
    procedure BDeleteClick(Sender: TObject);
    procedure BEditClick(Sender: TObject);
    procedure BExportToPascalUnitClick(Sender: TObject);
    procedure LBMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure LBSelectionChange(Sender: TObject; User: boolean);
  private
    FUndoRedoManager: TLevelBankUndoRedoManager;
    procedure FillLB;
    procedure ShowLevel(aIndex: integer);
    procedure UpdateWidgetState;
  public
    constructor Create(aOwner: TComponent); override;
    destructor Destroy; override;
    procedure OnShow;
  end;

implementation

uses u_screen_levelbank, u_project, form_main, u_surface_list;

{$R *.lfm}

{ TFrameToolLevelBank }

procedure TFrameToolLevelBank.BDeleteClick(Sender: TObject);
var oldName, newName: string;
  i, k: integer;
  item, newLevel: PLevelBankItem;
begin
  i := LB.ItemIndex;

  if Sender = BDelete then begin
    if i = -1 then exit;
    if QuestionDlg('','Delete this level ?', mtWarning,
                   [mrOk, 'Delete', mrCancel, 'Cancel'], 0) = mrCancel then exit;
    FUndoRedoManager.AddActionDeleteLevel(i);
    LevelBank.DeleteByIndex(i);
    LB.Items.Delete(i);
    ScreenLevelBank.ClearView;
    Project.SetModified;
    UpdateWidgetState;
  end;

  if Sender = BDuplicate then begin
    if i = -1 then exit;
    oldName := LB.Items.Strings[i];
    k := 0;
    repeat
      inc(k);
      if k < 100 then newName := oldName+'_'+Format('%.2d', [k])
        else newName := oldName+'_'+k.ToString;
    until not LevelBank.NameExists(newName);
    item := LevelBank.GetItemByName(oldName);
    if item = NIL then exit;
    newLevel := LevelBank.AddEmpty;
    newLevel^.name := newName;
    newLevel^.surfaces := item^.surfaces;
    LB.ItemIndex := LB.Items.Add(newName);
    FUndoRedoManager.AddActionDuplicateLevel(LB.ItemIndex);
    Project.SetModified;
  end;

  if Sender = BRename then begin
    if i = -1 then exit;
    oldName := LB.Items.Strings[i];
    newName := Trim(InputBox('', 'Enter the new name:', oldName));
    if (newName = oldName) or (newName = '') then exit;
    LevelBank.GetItemByName(LB.Items.Strings[i])^.name := newName;
    FUndoRedoManager.AddActionRenameLevel(i, oldName);
    LB.Items.Strings[i] := newName;
    Project.SetModified;
  end;

  if Sender = BUndo then begin
    FUndoRedoManager.Undo;
    Project.SetModified;
    UpdateWidgetState;
  end;

  if Sender = BRedo then begin
    FUndoRedoManager.Redo;
    Project.SetModified;
    UpdateWidgetState;
  end;
end;

procedure TFrameToolLevelBank.BEditClick(Sender: TObject);
var i: integer;
begin
  i := LB.ItemIndex;
  if i = -1 then exit;
  LB.ItemIndex := -1;
  FormMain.EditLevelInLevelBank(LB.Items.Strings[i]);
end;

procedure TFrameToolLevelBank.BExportToPascalUnitClick(Sender: TObject);
var t: TStringlist;
  nameUnit, nameClass: string;
  i, j: integer;
  s, texFilename, sw, sh: string;
  wi: TWorldInfo;
  sl: TSurfaceList;
  p: SizeInt;
begin
  if LevelBank.Size = 0 then exit;
  if LevelBank.Textures.Size = 0 then exit;
  nameClass := Trim(Edit2.Text);
  if Length(nameClass) < 2 then exit;
  nameUnit := Trim(Edit1.Text);
  if Length(nameUnit) < 2 then exit;
  SD1.FileName := nameUnit;
  if not SD1.Execute then exit;

  nameUnit := ExtractFilename(SD1.FileName);

  t := TStringList.Create;

  //unit interface
  t.AddText('{'#10+
            '  File generated by GameHelper, provided with OGLCScene library.'#10+
            '  Usage:'#10+
            '    - call '+nameClass+'.LoadTexture() when you construct your texture atlas.'#10+
            '    - call LoadLevel() to load the current game level.'#10+
            '    - retrieve the world area with function GetWordArea.'#10+
            '}'#10#10+
            'unit '+ChangeFileExt(nameUnit, '')+';'#10#10+
            '{$mode ObjFPC}{$H+}'#10#10+
            'interface'#10+#10+
            'uses'+LineEnding+
            '  Classes, SysUtils,'#10+
            '  OGLCScene, BGRABitmap, BGRABitmapTypes;'#10#10+
            'type'#10#10+
            '{ '+nameClass+' }'#10+#10+
            nameClass+' = class(TOGLCDecorManager)'#10+
            '  class procedure LoadTexture(aAtlas: TAtlas); override;'#10+
            '  procedure LoadLevel(aIndex: integer);'#10+
            '  function GetWorldArea: TRectF;'#10+
            'end;'#10#10);
  // implementation
  t.AddText('implementation'#10+
            'uses u_app, u_common;');
  t.Add('');
  // CONST level data in string format
  t.Add('const');
  for i:=0 to LevelBank.Size-1 do begin
    wi := Default(TWorldInfo);
    wi.LoadFromString(LevelBank.Mutable[i]^.worldinfo);
    s := 'Data_'+LevelBank.Mutable[i]^.name+'='''+ wi.SaveToString(False)+'|';
    sl := TSurfaceList.Create;
    sl.SetModeForLevelEditor;
    try
      sl.LoadFromString(LevelBank.Mutable[i]^.surfaces, False);
      s := s + 'Count|'+sl.Size.ToString+'|''+';
      t.Add(s);
      if sl.Size > 0 then begin
        s := '';
        for j:=0 to sl.Size-1 do begin
          s := s+'  ''S'+j.ToString+'|'+sl.Mutable[j]^.ExportToPascalString(LevelBank.Textures);
          if j < sl.Size-1 then s := s + '|''+'#10
            else s := s + ''';';
        end;
      end;
      t.AddText(s);
      t.Add('');
    finally
      sl.Free;
    end;
  end;
  // method for class LoadTexture()
  t.AddText('{ '+nameClass+' }'+#10+#10);
  t.AddText('class procedure '+nameClass+'.LoadTexture(aAtlas: TOGLCTextureAtlas);'#10+
            'var dataFolder: string;'#10+
            'begin'#10+
            '  inherited LoadTexture(aAtlas);'#10+
            '  dataFolder := FScene.App.DataFolder;');
  with LevelBank.Textures do
    for i:=0 to Size-1 do begin
      // texture filename must be relative to application Data folder
      texFilename := Mutable[i]^.filename;
      p := texFilename.LastIndexOf(DirectorySeparator+'Data'+DirectorySeparator);
      texFilename := texFilename.Remove(0, p+6);
      texFilename := 'dataFolder+'''+texFilename+'''';

      s := '  '; //+Mutable[i]^.name + ' := ';
      if ExtractFileExt(Mutable[i]^.filename) = '.svg' then begin
        if Mutable[i]^.width = -1 then sw := '-1'
          else sw := 'ScaleW('+Mutable[i]^.width.ToString+')';
        if Mutable[i]^.height = -1 then sh := '-1'
          else sh := 'ScaleH('+Mutable[i]^.height.ToString+')';

        if Mutable[i]^.isMultiFrame then
          s := s + 'aAtlas.AddMultiFrameImageFromSVG('+texFilename+
             ', '+sw+', '+sh+
             ', '+(Mutable[i]^.width div Mutable[i]^.frameWidth).ToString+
             ', '+(Mutable[i]^.height div Mutable[i]^.frameHeight).ToString+
             ', 0);'
        else
          s := s + 'aAtlas.AddFromSVG('+texFilename+', '+sw+', '+sh+');';
      end else begin
        if Mutable[i]^.isMultiFrame then
          s := s + 'aAtlas.AddMultiFrameImage('+texFilename+
          ', '+(Mutable[i]^.width div Mutable[i]^.frameWidth).ToString+
          ', '+(Mutable[i]^.height div Mutable[i]^.frameHeight).ToString+');'
        else
          s := s + 'aAtlas.Add('+texFilename+');';
      end;
      t.Add(s);
    end;
  t.AddText('end;'#10+#10);

  // procedure to load a level
  t.AddText('procedure '+nameClass+'.LoadLevel(aIndex: integer);'#10+
            'begin'#10+
            '  case aIndex of');
  for i:=0 to LevelBank.Size-1 do
    t.Add('    '+i.ToString+': DoLoadLevel('+'Data_'+LevelBank.Mutable[i]^.name+');');
  t.AddText('    else raise exception.create(''level index out of bounds'');'#10+
            '  end;'#10+
            'end;'#10#10);

  // function GetWorldArea: TRectF;
  t.AddText('function '+nameClass+'.GetWorldArea: TRectF;'#10+
            'begin'#10+
            '  Result.Left := ScaleW(Round(FNonScaledWorldArea.Left));'#10+
            '  Result.Top := ScaleH(Round(FNonScaledWorldArea.Top));'#10+
            '  Result.Right := ScaleW(Round(FNonScaledWorldArea.Right));'#10+
            '  Result.Bottom := ScaleH(Round(FNonScaledWorldArea.Bottom));'#10+
            'end;'#10#10);

  // end of file
  t.Add('end.');
  try
    t.SaveToFile(SD1.FileName);
    ShowMessage('Pascal unit created');
  finally
    t.Free;
  end;
end;

procedure TFrameToolLevelBank.LBMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  LB.ItemIndex := LB.GetIndexAtXY(X, Y);
end;

procedure TFrameToolLevelBank.LBSelectionChange(Sender: TObject; User: boolean);
var i: integer;
begin
  UpdateWidgetState;
  ShowLevel(LB.ItemIndex);

{  i := LB.ItemIndex;
  if i = -1 then Edit1.Text := ''
    else Edit1.Text := 'T'+LevelBank.Mutable[i]^.name;  }
end;

procedure TFrameToolLevelBank.FillLB;
var i: SizeUInt;
begin
  LB.Clear;
  if LevelBank.Size = 0 then exit;
  for i:=0 to LevelBank.Size-1 do
    LB.Items.Add(LevelBank.Mutable[i]^.name);
end;

procedure TFrameToolLevelBank.ShowLevel(aIndex: integer);
begin
  ScreenLevelBank.ClearView;
  if aIndex <> -1 then
    ScreenLevelBank.ShowLevel(aIndex);
end;

procedure TFrameToolLevelBank.UpdateWidgetState;
begin
  BDuplicate.Enabled := LB.ItemIndex <> -1;
  BRename.Enabled := BDuplicate.Enabled;
  BDelete.Enabled := BDuplicate.Enabled;
  BUndo.Enabled := FUndoRedoManager.CanUndo;
  BRedo.Enabled := FUndoRedoManager.CanRedo;
end;

constructor TFrameToolLevelBank.Create(aOwner: TComponent);
begin
  inherited Create(aOwner);
  FUndoRedoManager := TLevelBankUndoRedoManager.Create;
end;

destructor TFrameToolLevelBank.Destroy;
begin
  FUndoRedoManager.Free;
  FUndoRedoManager := NIL;
  inherited Destroy;
end;

procedure TFrameToolLevelBank.OnShow;
begin
  FillLB;
  UpdateWidgetState;
end;

end.

